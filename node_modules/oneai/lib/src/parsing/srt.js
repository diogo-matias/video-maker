"use strict";
/* eslint-disable global-require */
/* eslint-disable import/no-extraneous-dependencies */
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var srtFromJSON;
try {
    srtFromJSON = require('subtitle').stringifySync;
}
catch (er) {
    srtFromJSON = undefined;
}
var patternWord = /\w+/;
function toSRT(output, params) {
    if (srtFromJSON === undefined) {
        throw new errors_1.OneAIError(422, '.srt conversion requires installing the `subtitle` npm package', 'install via `npm i subtitle`');
    }
    else if (output.transcription === undefined) {
        throw new errors_1.OneAIError(422, 'pipeline output is missing a transcription field', 'run pipeline with the transcribe Skill & audio input');
    }
    else if (output.transcription.words === undefined || output.transcription.words.length === 0) {
        throw new errors_1.OneAIError(422, 'pipeline output is missing a transcription.words field', 'run pipeline with the transcribe Skill & timestamp_per_word parameter set to true');
    }
    else if (output.transcription.sentences === undefined) {
        throw new errors_1.OneAIError(422, 'pipeline output is missing a transcription.sentences field', 'run pipeline with sentences Skill after the transcribe Skill');
    }
    var nodes = output.transcription.sentences.map(function (sentence) {
        var cues = [];
        var words = output.transcription.words
            .filter(function (word) { return (word.timestamp >= sentence.timestamp && word.timestampEnd <= sentence.timestampEnd); }).sort(function (a, b) { return ((a.timestampEnd) - (b.timestamp)); });
        var text = '';
        var wordCount = 0;
        var timestamp = words[0].timestamp;
        var timestampEnd = 0;
        words.forEach(function (word) {
            var isWord = patternWord.test(word.span_text);
            if (isWord && (((params === null || params === void 0 ? void 0 : params.maxLengthWords) && wordCount >= (params === null || params === void 0 ? void 0 : params.maxLengthWords))
                || ((params === null || params === void 0 ? void 0 : params.maxLengthCharacters) && text.length >= (params === null || params === void 0 ? void 0 : params.maxLengthCharacters)))) {
                cues.push({
                    type: 'cue',
                    data: {
                        start: timestamp,
                        end: timestampEnd,
                        text: text.trim(),
                    },
                });
                text = '';
                wordCount = 0;
                timestamp = word.timestamp;
            }
            if (isWord) {
                text += ' ';
                wordCount++;
            }
            text += word.span_text;
            timestampEnd = word.timestampEnd;
        });
        if (text.length > 0) {
            cues.push({
                type: 'cue',
                data: {
                    start: timestamp,
                    end: sentence.timestampEnd,
                    text: text.trim(),
                },
            });
        }
        return cues;
    }).flat();
    return srtFromJSON(nodes, { format: 'SRT' });
}
exports.default = toSRT;
