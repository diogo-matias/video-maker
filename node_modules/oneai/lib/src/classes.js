"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapContent = exports.isFileContent = exports.isInput = void 0;
var path = __importStar(require("path"));
function isInput(object) {
    return typeof object === 'object' && 'text' in object;
}
exports.isInput = isInput;
function isFileContent(object) {
    return typeof object === 'object' && 'filePath' in object && 'buffer' in object;
}
exports.isFileContent = isFileContent;
var extensions = {
    '.json': {
        contentType: 'application/json',
        type: 'conversation',
        isBinary: false,
    },
    '.txt': {
        contentType: 'text/plain',
        type: 'article',
        isBinary: false,
    },
    '.srt': {
        contentType: 'text/plain',
        type: 'conversation',
        isBinary: false,
    },
    '.mp3': {
        contentType: 'audio/mp3',
        type: 'conversation',
        isBinary: true,
    },
    '.wav': {
        contentType: 'audio/wav',
        type: 'conversation',
        isBinary: true,
    },
    '.html': {
        contentType: 'text/plain',
        type: 'article',
        isBinary: false,
    },
};
function wrapContent(content) {
    if (isInput(content))
        return content;
    if (typeof content === 'string') {
        return {
            text: content,
            type: 'article',
        };
    }
    if (isFileContent(content)) {
        var ext = path.extname(content.filePath);
        if (!(ext in extensions))
            throw new Error("Unsupported file type: ".concat(ext));
        var _a = extensions[ext], contentType = _a.contentType, type = _a.type, isBinary = _a.isBinary;
        return {
            text: content,
            encoding: (isBinary) ? 'base64' : 'utf8',
            contentType: contentType,
            type: type,
        };
    }
    return {
        text: content,
        type: 'conversation',
        contentType: 'application/json',
    };
}
exports.wrapContent = wrapContent;
