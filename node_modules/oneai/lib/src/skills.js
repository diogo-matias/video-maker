"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.skills = void 0;
exports.skills = {
    summarize: function (params) {
        var skill = ({
            apiName: 'summarize',
            params: params,
            textField: 'summary',
        });
        if ((params === null || params === void 0 ? void 0 : params.find_origins) !== false) {
            skill.params = __assign({}, params);
            skill.labelsField = 'origins';
        }
        return skill;
    },
    emotions: function () { return ({ apiName: 'emotions' }); },
    keywords: function () { return ({ apiName: 'keywords' }); },
    /** @deprecated since v. 0.0.9- use `splitBySentence` instead */
    sentences: function () { return ({ apiName: 'sentences' }); },
    highlights: function () { return ({ apiName: 'highlights' }); },
    topics: function () { return ({
        apiName: 'article-topics', labelsField: 'topics',
    }); },
    sentiments: function () { return ({ apiName: 'sentiments' }); },
    htmlToArticle: function () { return ({
        apiName: 'html-extract-article',
        textField: 'htmlArticle',
        labelsField: 'htmlFields',
    }); },
    htmlAllText: function () { return ({
        apiName: 'html-extract-text',
        textField: 'htmlText',
        labelsField: 'htmlFields',
    }); },
    proofread: function () { return ({
        apiName: 'enhance',
        textField: 'proofread',
        labelsField: 'replacements',
    }); },
    actionItems: function () { return ({
        apiName: 'action-items', labelsField: 'actionItems',
    }); },
    anonymize: function () { return ({
        apiName: 'anonymize',
        labelsField: 'anonymizations',
    }); },
    names: function () { return ({ apiName: 'names' }); },
    numbers: function () { return ({ apiName: 'numbers' }); },
    splitBySentence: function () { return ({ apiName: 'sentences' }); },
    splitByTopic: function () { return ({
        apiName: 'dialogue-segmentation', labelsField: 'segments',
    }); },
    salesInsights: function () { return ({
        apiName: 'sales-insights', labelsField: 'salesInsights',
    }); },
    transcribe: function (params) { return ({
        apiName: 'transcribe',
        textField: 'transcription',
        labelsField: 'words',
        params: params,
    }); },
    detectLanguage: function () { return ({
        apiName: 'detect-language', labelsField: 'language',
    }); },
    headline: function () { return ({
        apiName: 'headline', labelsField: 'headline',
    }); },
    subheading: function () { return ({
        apiName: 'subheading', labelsField: 'subheading',
    }); },
    pricing: function () { return ({
        apiName: 'business-entities', labelsField: 'pricing',
    }); },
};
