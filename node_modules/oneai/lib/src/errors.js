"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpStatusErrorType = exports.ServerError = exports.APIKeyError = exports.InputError = exports.OneAIError = void 0;
var OneAIError = /** @class */ (function (_super) {
    __extends(OneAIError, _super);
    function OneAIError(statusCode, message, details, requestId) {
        var _this = _super.call(this, message) || this;
        _this.toJSON = function () { return ({
            statusCode: _this.statusCode, details: _this.details, requestId: _this.requestId,
        }); };
        Object.setPrototypeOf(_this, OneAIError.prototype);
        _this.statusCode = statusCode;
        _this.details = details;
        _this.requestId = requestId;
        return _this;
    }
    return OneAIError;
}(Error));
exports.OneAIError = OneAIError;
/** An error raised when the input is invalid or is of an incompatible type for the pipeline. */
var InputError = /** @class */ (function (_super) {
    __extends(InputError, _super);
    function InputError(statusCode, message, details, requestId) {
        var _this = _super.call(this, statusCode, message, details, requestId) || this;
        Object.setPrototypeOf(_this, InputError.prototype);
        return _this;
    }
    return InputError;
}(OneAIError));
exports.InputError = InputError;
/** An error raised when the API key is invalid, expired, or missing quota. */
var APIKeyError = /** @class */ (function (_super) {
    __extends(APIKeyError, _super);
    function APIKeyError(statusCode, message, details, requestId) {
        var _this = _super.call(this, statusCode, message, details, requestId) || this;
        Object.setPrototypeOf(_this, APIKeyError.prototype);
        return _this;
    }
    return APIKeyError;
}(OneAIError));
exports.APIKeyError = APIKeyError;
/** An error raised when something went wrong on One AI servers. */
var ServerError = /** @class */ (function (_super) {
    __extends(ServerError, _super);
    function ServerError(statusCode, message, details, requestId) {
        var _this = _super.call(this, statusCode, message, details, requestId) || this;
        Object.setPrototypeOf(_this, ServerError.prototype);
        return _this;
    }
    return ServerError;
}(OneAIError));
exports.ServerError = ServerError;
exports.httpStatusErrorType = {
    400: InputError,
    401: APIKeyError,
    403: APIKeyError,
    500: ServerError,
    503: ServerError,
};
