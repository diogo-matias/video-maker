"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeFormat = void 0;
var process_1 = require("process");
var readline = __importStar(require("readline"));
var Logger = /** @class */ (function () {
    function Logger(enabled) {
        if (enabled === void 0) { enabled = true; }
        this.prefix = '\x1b[34m●\x1b[36m▲\x1b[35m▮\x1b[0m ';
        this.enabled = enabled;
    }
    Logger.prototype.debug = function (message) {
        if (this.enabled)
            process_1.stdout.write(this.prefix + message);
    };
    Logger.prototype.debugNoNewline = function (message) {
        if (this.enabled) {
            readline.clearLine(process_1.stdout, 0);
            readline.cursorTo(process_1.stdout, 0);
            process_1.stdout.write(this.prefix + message);
        }
    };
    Logger.prototype.error = function (message) {
        if (this.enabled)
            process_1.stderr.write("".concat(message, "\n"));
    };
    return Logger;
}());
exports.default = Logger;
function timeFormat(time) {
    var millies = Math.floor(time % 1000);
    var seconds = Math.floor(time / 1000);
    var minutes = Math.floor(seconds / 60);
    return "".concat((minutes > 0) ? "".concat(minutes, "m ") : '').concat(seconds % 60, "s ").concat(millies, "ms");
}
exports.timeFormat = timeFormat;
