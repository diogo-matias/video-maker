import { ApiReqParams } from './api/client';
import ClusteringApiClient from './api/clustering';
import { _Input } from './classes';
export declare type Paginated<T> = AsyncGenerator<T, void>;
export declare type ClusteringApiParams = ApiReqParams & {
    sort?: 'ASC' | 'DESC';
    limit?: number;
    fromDate?: Date | string;
    toDate?: Date | string;
    itemMetadata?: string;
};
export declare class Item {
    id: number;
    text: string;
    createdAt: Date;
    distance: number;
    phrase: Phrase;
    constructor(id: number, text: string, createdAt: Date, distance: number, phrase: Phrase);
    toJSON(): {
        type: string;
        id: number;
        text: string;
        createdAt: Date;
        distance: number;
        phraseId: number;
    };
    static fromJSON(phrase: Phrase, item: any): Item;
}
export declare class Phrase {
    id: number;
    text: string;
    itemCount: number;
    metadata?: any;
    cluster: Cluster;
    constructor(id: number, text: string, itemCount: number, cluster: Cluster, metadata?: any);
    getItems(params?: ClusteringApiParams): AsyncGenerator<Item, void, undefined>;
    toJSON(): {
        type: string;
        id: number;
        text: string;
        itemCount: number;
        metadata: any;
        clusterId: number;
    };
    static fromJSON(cluster: Cluster, phrase: any): Phrase;
}
export declare class Cluster {
    id: number;
    text?: string;
    phraseCount?: number;
    metadata?: any;
    collection: _Collection;
    constructor(params: {
        id: number;
        text?: string;
        phraseCount?: number;
        metadata?: any;
        collection: _Collection;
    });
    getPhrases(params?: ClusteringApiParams): AsyncGenerator<Phrase, void, undefined>;
    addItems(items: _Input<string>[], params?: ApiReqParams): Promise<any>;
    toJSON(): {
        type: string;
        id: number;
        text: string | undefined;
        phraseCount: number | undefined;
        metadata: any;
        collectionId: string;
    };
    static fromJSON(collection: _Collection, cluster: any): Cluster;
}
export declare abstract class _Collection {
    static apiDateFormat: string;
    abstract client: ClusteringApiClient;
    id: string;
    params?: ApiReqParams;
    constructor(id: string, params?: ApiReqParams);
    getClusters(params?: ClusteringApiParams): Paginated<Cluster>;
    find(query: string, params?: ApiReqParams & {
        threshold: number;
    }): Promise<Cluster[]>;
    addItems(items: _Input<string>[], params?: ApiReqParams & {
        forceNewClusters: boolean;
    }): Promise<any>;
    toJSON(): {
        type: string;
        id: string;
    };
}
export declare const createCollectionClass: (client: ClusteringApiClient) => {
    new (id: string, params?: Partial<import("./api/client").ApiClientParams> | undefined): {
        client: ClusteringApiClient;
        id: string;
        params?: Partial<import("./api/client").ApiClientParams> | undefined;
        getClusters(params?: ClusteringApiParams | undefined): Paginated<Cluster>;
        find(query: string, params?: (Partial<import("./api/client").ApiClientParams> & {
            threshold: number;
        }) | undefined): Promise<Cluster[]>;
        addItems(items: _Input<string>[], params?: (Partial<import("./api/client").ApiClientParams> & {
            forceNewClusters: boolean;
        }) | undefined): Promise<any>;
        toJSON(): {
            type: string;
            id: string;
        };
    };
    getCollections(params?: ClusteringApiParams | undefined): Paginated<{
        client: ClusteringApiClient;
        id: string;
        params?: Partial<import("./api/client").ApiClientParams> | undefined;
        getClusters(params?: ClusteringApiParams | undefined): Paginated<Cluster>;
        find(query: string, params?: (Partial<import("./api/client").ApiClientParams> & {
            threshold: number;
        }) | undefined): Promise<Cluster[]>;
        addItems(items: _Input<string>[], params?: (Partial<import("./api/client").ApiClientParams> & {
            forceNewClusters: boolean;
        }) | undefined): Promise<any>;
        toJSON(): {
            type: string;
            id: string;
        };
    }>;
    apiDateFormat: string;
};
