import { ConversationContent, Output } from './classes';
import { Cluster, Item, Phrase } from './clustering';
import PipelineApiClient from './api/pipeline';
import { ApiClientParams } from './api/client';
import Logger from './logging';
import ClusteringApiClient from './api/clustering';
declare class OneAI {
    /**
     * A Language Skill is a package of trained NLP models.
     * Skills accept text and respond with processed texts and extracted metadata.
     *
     * Process texts with Skills using `Pipeline`s
     */
    readonly skills: {
        summarize: (params?: {
            min_length?: number | undefined;
            max_length?: number | undefined;
            find_origins?: boolean | undefined;
        } | undefined) => import("./classes").Skill;
        emotions: () => import("./classes").Skill;
        keywords: () => import("./classes").Skill;
        sentences: () => import("./classes").Skill;
        highlights: () => import("./classes").Skill;
        topics: () => import("./classes").Skill;
        sentiments: () => import("./classes").Skill;
        htmlToArticle: () => import("./classes").Skill;
        htmlAllText: () => import("./classes").Skill;
        proofread: () => import("./classes").Skill;
        actionItems: () => import("./classes").Skill;
        anonymize: () => import("./classes").Skill;
        names: () => import("./classes").Skill;
        numbers: () => import("./classes").Skill;
        splitBySentence: () => import("./classes").Skill;
        splitByTopic: () => import("./classes").Skill;
        salesInsights: () => import("./classes").Skill;
        transcribe: (params?: {
            timestamp_per_word?: boolean | undefined;
        } | undefined) => import("./classes").Skill;
        detectLanguage: () => import("./classes").Skill;
        headline: () => import("./classes").Skill;
        subheading: () => import("./classes").Skill;
        pricing: () => import("./classes").Skill;
    };
    static skills: {
        summarize: (params?: {
            min_length?: number | undefined;
            max_length?: number | undefined;
            find_origins?: boolean | undefined;
        } | undefined) => import("./classes").Skill;
        emotions: () => import("./classes").Skill;
        keywords: () => import("./classes").Skill;
        sentences: () => import("./classes").Skill;
        highlights: () => import("./classes").Skill;
        topics: () => import("./classes").Skill;
        sentiments: () => import("./classes").Skill;
        htmlToArticle: () => import("./classes").Skill;
        htmlAllText: () => import("./classes").Skill;
        proofread: () => import("./classes").Skill;
        actionItems: () => import("./classes").Skill;
        anonymize: () => import("./classes").Skill;
        names: () => import("./classes").Skill;
        numbers: () => import("./classes").Skill;
        splitBySentence: () => import("./classes").Skill;
        splitByTopic: () => import("./classes").Skill;
        salesInsights: () => import("./classes").Skill;
        transcribe: (params?: {
            timestamp_per_word?: boolean | undefined;
        } | undefined) => import("./classes").Skill;
        detectLanguage: () => import("./classes").Skill;
        headline: () => import("./classes").Skill;
        subheading: () => import("./classes").Skill;
        pricing: () => import("./classes").Skill;
    };
    private pipelineApiClient;
    private clusteringApiClient;
    logger: Logger;
    static defaultParams: ApiClientParams;
    params: ApiClientParams;
    constructor(apiKey?: string, params?: Partial<ApiClientParams>);
    Pipeline: {
        new (...steps: import("./classes").Skill[]): {
            client: PipelineApiClient;
            steps: import("./classes").Skill[];
            run(text: import("./classes").TextContent | import("./classes").Input, params?: Partial<ApiClientParams> | undefined): Promise<Output>;
            runFile(filePath: string, params?: (Partial<ApiClientParams> & {
                sync?: boolean | undefined;
                interval?: number | undefined;
            }) | undefined): Promise<Output>;
            runBatch<T extends import("./classes").TextContent | import("./classes").Input>(inputs: Iterable<T>, params?: (Partial<ApiClientParams> & {
                maxConcurrentRequests?: number | undefined;
                onOutput?: ((input: T, output: Output) => void) | undefined;
                onError?: ((input: T, error: any) => void) | undefined;
            }) | undefined): Promise<import("./schedule").BatchResponse<T, Output>>;
        };
    };
    clustering: {
        Item: typeof Item;
        Phrase: typeof Phrase;
        Cluster: typeof Cluster;
        Collection: {
            new (id: string, params?: Partial<ApiClientParams> | undefined): {
                client: ClusteringApiClient;
                id: string;
                params?: Partial<ApiClientParams> | undefined;
                getClusters(params?: import("./clustering").ClusteringApiParams | undefined): import("./clustering").Paginated<Cluster>;
                find(query: string, params?: (Partial<ApiClientParams> & {
                    threshold: number;
                }) | undefined): Promise<Cluster[]>;
                addItems(items: import("./classes")._Input<string>[], params?: (Partial<ApiClientParams> & {
                    forceNewClusters: boolean;
                }) | undefined): Promise<any>;
                toJSON(): {
                    type: string;
                    id: string;
                };
            };
            getCollections(params?: import("./clustering").ClusteringApiParams | undefined): import("./clustering").Paginated<{
                client: ClusteringApiClient;
                id: string;
                params?: Partial<ApiClientParams> | undefined;
                getClusters(params?: import("./clustering").ClusteringApiParams | undefined): import("./clustering").Paginated<Cluster>;
                find(query: string, params?: (Partial<ApiClientParams> & {
                    threshold: number;
                }) | undefined): Promise<Cluster[]>;
                addItems(items: import("./classes")._Input<string>[], params?: (Partial<ApiClientParams> & {
                    forceNewClusters: boolean;
                }) | undefined): Promise<any>;
                toJSON(): {
                    type: string;
                    id: string;
                };
            }>;
            apiDateFormat: string;
        };
        getCollections: (params?: import("./clustering").ClusteringApiParams | undefined) => import("./clustering").Paginated<{
            client: ClusteringApiClient;
            id: string;
            params?: Partial<ApiClientParams> | undefined;
            getClusters(params?: import("./clustering").ClusteringApiParams | undefined): import("./clustering").Paginated<Cluster>;
            find(query: string, params?: (Partial<ApiClientParams> & {
                threshold: number;
            }) | undefined): Promise<Cluster[]>;
            addItems(items: import("./classes")._Input<string>[], params?: (Partial<ApiClientParams> & {
                forceNewClusters: boolean;
            }) | undefined): Promise<any>;
            toJSON(): {
                type: string;
                id: string;
            };
        }>;
    };
    parsing: {
        parseConversation: (input: string) => ConversationContent;
        toSRT: (output: Output, params?: {
            maxLengthWords?: number;
            maxLengthCharacters?: number;
        }) => string;
    };
    static OneAI: typeof OneAI;
    toString(): string;
}
export = OneAI;
