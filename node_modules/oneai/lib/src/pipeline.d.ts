import PipelineApiClient from './api/pipeline';
import { Input, Output, Skill, TextContent } from './classes';
import { BatchResponse } from './schedule';
declare const createPipelineClass: (client: PipelineApiClient) => {
    new (...steps: Skill[]): {
        client: PipelineApiClient;
        steps: Skill[];
        run(text: TextContent | Input, params?: Partial<import("./api/client").ApiClientParams> | undefined): Promise<Output>;
        runFile(filePath: string, params?: (Partial<import("./api/client").ApiClientParams> & {
            sync?: boolean | undefined;
            interval?: number | undefined;
        }) | undefined): Promise<Output>;
        runBatch<T extends TextContent | Input>(inputs: Iterable<T>, params?: (Partial<import("./api/client").ApiClientParams> & {
            maxConcurrentRequests?: number | undefined;
            onOutput?: ((input: T, output: Output) => void) | undefined;
            onError?: ((input: T, error: any) => void) | undefined;
        }) | undefined): Promise<BatchResponse<T, Output>>;
    };
};
export default createPipelineClass;
