/// <reference types="node" />
import type { OutputFields } from './skills';
import { OneAIError } from './errors';
export interface Skill {
    apiName: string;
    params?: object;
    textField?: string;
    labelsField?: string;
}
export declare type FileContent = {
    filePath: string;
    buffer: Buffer;
};
export declare type ConversationContent = {
    speaker: string;
    utterance: string;
}[];
export declare type TextContent = string | ConversationContent | FileContent;
export declare type inputType = 'article' | 'conversation';
export declare type encoding = 'utf8' | 'base64';
export interface _Input<T extends TextContent> {
    text: T;
    type?: inputType;
    contentType?: string;
    encoding?: encoding;
    metadata?: Record<string, any>;
}
export declare type Input = _Input<TextContent>;
export declare function isInput(object: any): object is Input;
export declare function isFileContent(object: any): object is FileContent;
export declare function wrapContent<T extends TextContent>(content: _Input<T> | T): _Input<T>;
interface Span {
    start: number;
    end: number;
    section: number;
}
export interface Label {
    skill: string;
    type: string;
    name: string;
    /** @deprecated since version 0.2.0, use `outputSpans` instead */
    span: number[];
    /** @deprecated since version 0.4.0, use `spanText` instead */
    span_text: string;
    spanText: string;
    outputSpans: Span[];
    inputSpans: Span[];
    value: number | string;
    data: object;
    timestamp?: number;
    timestampEnd?: number;
}
export interface Output extends Input, OutputFields {
    text: TextContent;
    requestId?: string;
    stats?: {
        concurrencyWaitTime?: number;
        totalRunningJobs?: number;
        totalWaitingJobs?: number;
        wordCount?: number;
        transcriptionSecondsCount?: number;
    };
    [key: string]: (Output | Label[] | TextContent | any);
}
export interface AsyncApiTask {
    id: string;
    name: string;
    skills: Skill[];
}
export interface AsyncApiResponse extends AsyncApiTask {
    status: 'COMPLETED' | 'FAILED' | 'RUNNING';
    result?: Output | OneAIError;
}
export {};
