"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCollectionClass = exports._Collection = exports.Cluster = exports.Phrase = exports.Item = void 0;
var mapping_1 = require("./api/mapping");
var Item = /** @class */ (function () {
    function Item(id, text, createdAt, distance, phrase) {
        this.id = id;
        this.text = text;
        this.createdAt = createdAt;
        this.distance = distance;
        this.phrase = phrase;
    }
    Item.prototype.toJSON = function () {
        return {
            type: 'item',
            id: this.id,
            text: this.text,
            createdAt: this.createdAt,
            distance: this.distance,
            phraseId: this.phrase.id,
        };
    };
    Item.fromJSON = function (phrase, item) {
        return new Item(item.id, item.original_text, new Date(item.created_at), item.distance_to_phrase, phrase);
    };
    return Item;
}());
exports.Item = Item;
var Phrase = /** @class */ (function () {
    function Phrase(id, text, itemCount, cluster, metadata) {
        this.id = id;
        this.text = text;
        this.itemCount = itemCount;
        this.cluster = cluster;
        this.metadata = metadata;
    }
    Phrase.prototype.getItems = function (params) {
        return __asyncGenerator(this, arguments, function getItems_1() {
            var urlParams;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParams = (0, mapping_1.buildClusteringQueryParams)(params);
                        /* istanbul ignore next */
                        return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(this.cluster.collection.client.getPaginated("".concat(this.cluster.collection.id, "/phrases/").concat(this.id, "/items?").concat(urlParams), 'items', function (item) { return Item.fromJSON(_this, item); }, params === null || params === void 0 ? void 0 : params.limit, params))))];
                    case 1: 
                    /* istanbul ignore next */
                    return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                    case 2:
                        /* istanbul ignore next */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Phrase.prototype.toJSON = function () {
        return {
            type: 'phrase',
            id: this.id,
            text: this.text,
            itemCount: this.itemCount,
            metadata: this.metadata,
            clusterId: this.cluster.id,
        };
    };
    Phrase.fromJSON = function (cluster, phrase) {
        return new Phrase(phrase.phrase_id, phrase.text, phrase.items_count, cluster, phrase.metadata);
    };
    return Phrase;
}());
exports.Phrase = Phrase;
var Cluster = /** @class */ (function () {
    function Cluster(params) {
        this.id = params.id;
        this.text = params.text;
        this.phraseCount = params.phraseCount;
        this.collection = params.collection;
        this.metadata = params.metadata;
    }
    Cluster.prototype.getPhrases = function (params) {
        return __asyncGenerator(this, arguments, function getPhrases_1() {
            var urlParams;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParams = (0, mapping_1.buildClusteringQueryParams)(params);
                        /* istanbul ignore next */
                        return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(this.collection.client.getPaginated("".concat(this.collection.id, "/clusters/").concat(this.id, "/phrases?").concat(urlParams), 'phrases', function (phrase) { return Phrase.fromJSON(_this, phrase); }, params === null || params === void 0 ? void 0 : params.limit, params))))];
                    case 1: 
                    /* istanbul ignore next */
                    return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                    case 2:
                        /* istanbul ignore next */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Cluster.prototype.addItems = function (items, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.collection.client.postItems("".concat(this.collection.id, "/items"), items, __assign({ forceClusterId: this.id }, params))];
            });
        });
    };
    Cluster.prototype.toJSON = function () {
        return {
            type: 'cluster',
            id: this.id,
            text: this.text,
            phraseCount: this.phraseCount,
            metadata: this.metadata,
            collectionId: this.collection.id,
        };
    };
    Cluster.fromJSON = function (collection, cluster) {
        return new Cluster({
            id: cluster.cluster_id,
            text: cluster.cluster_phrase,
            phraseCount: cluster.phrases_count,
            collection: collection,
            metadata: cluster.metadata,
        });
    };
    return Cluster;
}());
exports.Cluster = Cluster;
var _Collection = /** @class */ (function () {
    function _Collection(id, params) {
        this.id = id;
        this.params = params;
    }
    _Collection.prototype.getClusters = function (params) {
        return __asyncGenerator(this, arguments, function getClusters_1() {
            var urlParams;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParams = (0, mapping_1.buildClusteringQueryParams)(params);
                        /* istanbul ignore next */
                        return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(this.client.getPaginated("".concat(this.id, "/clusters?").concat(urlParams), 'clusters', function (cluster) { return Cluster.fromJSON(_this, cluster); }, params === null || params === void 0 ? void 0 : params.limit, params))))];
                    case 1: 
                    /* istanbul ignore next */
                    return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                    case 2:
                        /* istanbul ignore next */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    _Collection.prototype.find = function (query, params) {
        return __awaiter(this, void 0, void 0, function () {
            var urlParams, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParams = new URLSearchParams(__assign({ text: query }, /* istanbul ignore next */ ((params === null || params === void 0 ? void 0 : params.threshold) && { 'similarity-threshold': params.threshold.toString() })));
                        return [4 /*yield*/, this.client.get("".concat(this.id, "/clusters/find?").concat(urlParams), params)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.map(function (cluster) { return Cluster.fromJSON(_this, cluster); }) || []];
                }
            });
        });
    };
    _Collection.prototype.addItems = function (items, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.postItems("".concat(this.id, "/items"), items, params)];
            });
        });
    };
    _Collection.prototype.toJSON = function () {
        return {
            type: 'collection',
            id: this.id,
        };
    };
    _Collection.apiDateFormat = '%Y-%m-%d';
    return _Collection;
}());
exports._Collection = _Collection;
var createCollectionClass = function (client) { return /** @class */ (function (_super) {
    __extends(Collection, _super);
    function Collection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.client = client;
        return _this;
    }
    Collection.getCollections = function (params) {
        return __asyncGenerator(this, arguments, function getCollections_1() {
            var urlParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParams = (0, mapping_1.buildClusteringQueryParams)(params);
                        /* istanbul ignore next */
                        return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(client.getPaginated("?".concat(urlParams), 'collections', function (id) { return (new Collection(id, params)); }, params === null || params === void 0 ? void 0 : params.limit))))];
                    case 1: 
                    /* istanbul ignore next */
                    return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                    case 2:
                        /* istanbul ignore next */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Collection;
}(_Collection)); };
exports.createCollectionClass = createCollectionClass;
