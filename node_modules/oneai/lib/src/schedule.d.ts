import { Output, AsyncApiResponse, AsyncApiTask } from './classes';
import { OneAIError } from './errors';
import Logger from './logging';
export declare function polling(task: AsyncApiTask, pollingFn: (task: AsyncApiTask) => Promise<AsyncApiResponse>, interval: number, logger: Logger): Promise<Output>;
export interface BatchResponse<TInput, TOutput> {
    outputs: {
        index: number;
        input: TInput;
        output: TOutput;
    }[];
    errors: {
        index: number;
        input: TInput;
        error: OneAIError;
    }[];
}
export declare function batchProcessing<TInput, TOutput>(inputs: Iterable<TInput>, processingFn: (input: TInput) => Promise<TOutput>, concurrentReqs: number, onOutput?: (input: TInput, output: TOutput) => void, onError?: (input: TInput, error: any) => void, logger?: Logger): Promise<BatchResponse<TInput, TOutput>>;
