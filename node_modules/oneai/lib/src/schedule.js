"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchProcessing = exports.polling = void 0;
var logging_1 = __importStar(require("./logging"));
function polling(task, pollingFn, interval, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var response, timeStart;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    response = { status: 'RUNNING' };
                    timeStart = Date.now();
                    _a.label = 1;
                case 1:
                    if (!(response.status !== 'COMPLETED')) return [3 /*break*/, 4];
                    return [4 /*yield*/, pollingFn(task)];
                case 2:
                    response = _a.sent();
                    logger.debugNoNewline("Processing file ".concat(task.name, " - status ").concat(response.status, " - ").concat((0, logging_1.timeFormat)(Date.now() - timeStart)));
                    /* istanbul ignore if */
                    if (response.status === 'FAILED')
                        throw response.result;
                    return [4 /*yield*/, new Promise(function (f) { return setTimeout(f, 1000 * interval); })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 4:
                    logger.debugNoNewline("Processing of file ".concat(task.name, " complete - took ").concat((0, logging_1.timeFormat)(Date.now() - timeStart), " total\n"));
                    return [2 /*return*/, response.result];
            }
        });
    });
}
exports.polling = polling;
function batchProcessing(inputs, processingFn, concurrentReqs, onOutput, onError, logger) {
    return __awaiter(this, void 0, void 0, function () {
        function batchWorker() {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, done, timeStart, _b, index, input, output, error_1, timeDelta;
                var _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = inputDist.next(), value = _a.value, done = _a.done;
                            timeStart = Date.now();
                            _d.label = 1;
                        case 1:
                            if (!!done) return [3 /*break*/, 7];
                            _b = __read(value, 2), index = _b[0], input = _b[1];
                            _d.label = 2;
                        case 2:
                            _d.trys.push([2, 4, 5, 6]);
                            return [4 /*yield*/, processingFn(input)];
                        case 3:
                            output = _d.sent();
                            if (onOutput)
                                onOutput(input, output);
                            response.outputs.push({
                                index: index,
                                input: input,
                                output: output,
                            });
                            return [3 /*break*/, 6];
                        case 4:
                            error_1 = _d.sent();
                            lgr.error("\nInput ".concat(index, ": ").concat(error_1 === null || error_1 === void 0 ? void 0 : error_1.message));
                            if (onError)
                                onError(input, error_1);
                            response.errors.push({
                                index: index,
                                input: input,
                                error: error_1,
                            });
                            return [3 /*break*/, 6];
                        case 5:
                            timeDelta = Date.now() - timeStart;
                            timeTotal += timeDelta;
                            timeStart += timeDelta;
                            lgr.debugNoNewline("Input ".concat(index, " - ").concat((0, logging_1.timeFormat)(timeDelta), "/input - ").concat((0, logging_1.timeFormat)(timeTotal), " total - ").concat(response.outputs.length, " successful - ").concat(response.errors.length, " failed"));
                            return [7 /*endfinally*/];
                        case 6:
                            (_c = inputDist.next(), value = _c.value, done = _c.done);
                            return [3 /*break*/, 1];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        }
        var response, inputDist, lgr, timeTotal, workers;
        return __generator(this, function (_a) {
            response = {
                outputs: [],
                errors: [],
            };
            inputDist = (function inputDist() {
                var index, inputs_1, inputs_1_1, input, e_1_1;
                var e_1, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            index = 0;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next();
                            _b.label = 2;
                        case 2:
                            if (!!inputs_1_1.done) return [3 /*break*/, 5];
                            input = inputs_1_1.value;
                            return [4 /*yield*/, [index++, input]];
                        case 3:
                            _b.sent();
                            _b.label = 4;
                        case 4:
                            inputs_1_1 = inputs_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return)) _a.call(inputs_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            }());
            lgr = (logger !== undefined) ? logger : new logging_1.default(false);
            timeTotal = 0;
            lgr.debug("Starting processing batch with ".concat(concurrentReqs, " workers"));
            workers = __spreadArray([], __read(Array(concurrentReqs).keys()), false).map(function () { return batchWorker(); });
            return [2 /*return*/, Promise.all(workers).then(function () {
                    var size = response.outputs.length + response.errors.length;
                    lgr.debugNoNewline("Processed ".concat(size, " inputs - ").concat((0, logging_1.timeFormat)(timeTotal / size), "/input - ").concat((0, logging_1.timeFormat)(timeTotal), " total - ").concat(response.outputs.length, " successful - ").concat(response.errors.length, " failed\n"));
                    return response;
                })];
        });
    });
}
exports.batchProcessing = batchProcessing;
